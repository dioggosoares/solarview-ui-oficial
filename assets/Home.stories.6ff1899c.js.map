{"version":3,"file":"Home.stories.6ff1899c.js","sources":["../../src/pages/Home.stories.mdx"],"sourcesContent":["import { Meta } from '@storybook/addon-docs'\n\n<Meta title=\"Home\" />\n\n# Solarview UI\n\nDesign System da Solarview\n\n## Installation Components\n\n```bash\nyarn add @solarview-ui/core\n```\n\nor\n\n```bash\nnpm install @solarview-ui/core\n```\n## Installation Tokens\n\n```bash\nyarn add @solarview-ui/tokens\n```\n\nor\n\n```bash\nnpm install @solarview-ui/tokens\n```\n\n## Como usar\n\nBasta importar os componentes necessários e adicioná-los no componente ou na página.\n\n### Usando o componente Modal\n\n```tsx\nimport { Button, Close, Modal, TagIcon, Plus, TextInput, Trash } from \"@solarview-ui/core\";\nimport { colors } from \"@solarview-ui/tokens\";\n\nexport function Component(){\n  return (\n    <div>\n      <Modal\n        hasHeader // => diz para o modal que terá um HEADER (adicionando também um botão para fechar o modal)\n        title=\"Tags\" // não necessário caso não tenha um HEADER\n        closeIcon={<Close />} // não necessário caso não tenha um HEADER\n        content={ // conteúdo do body do Modal, podendo também adicionar um footer ao final\n          <div>\n            <Text size=\"md\" weight=\"normal\">\n              Adicione ou remova Tags para agrupar usinas.\n            </Text>\n\n            <div id=\"body\">\n              <div>\n                <TextInput\n                  label=\"Tag 1\"\n                  placeholder=\"tag1\"\n                />\n                <Button\n                  variant=\"tertiary\"\n                  size=\"sm\"\n                  aspect=\"compress\"\n                >\n                  <Trash size={16} color={colors.feedbackDanger} />\n                </Button>\n              </div>\n\n              <div>\n                <TextInput\n                  label=\"Tag 2\"\n                  placeholder=\"tag2\"\n                />\n                <Button\n                  variant=\"tertiary\"\n                  size=\"sm\"\n                  aspect=\"compress\"\n                >\n                  <Trash size={16} color={colors.feedbackDanger} />\n                </Button>\n              </div>\n\n              <Button variant=\"tertiary\" size=\"sm\">\n                <Plus size={10} />\n                Criar nova Tag\n              </Button>\n            </div>\n\n            <footer>\n              <Button variant=\"quaternary\" size=\"md\">\n                Cancelar\n              </Button>\n              <Button variant=\"primary\" size=\"md\">\n                Salvar\n              </Button>\n            </footer>\n          </div>\n        }\n      >\n        // Passa o botão que vai acionar o modal como filho do componente\n        <Button variant=\"secondary\">\n          <TagIcon size={16} />\n          Tags\n        </Button>\n      </Modal>\n    </div>\n  );\n};\n```\n\n### Usando o componente Tabs\n\n<img src=\"https://raw.githubusercontent.com/dioggosoares/solarview-ui-oficial/main/packages/docs/public/tabs.png\" align=\"left\" />\n\n```tsx\nimport { TabRoot, TabList, TabButton, TabContent, Box } from \"@solarview-ui/core\";\n\n// IMPORTANTE: esse componente não é mostrado no storybook\n\nexport function Component(){\n  return (\n    <div>\n      <TabRoot defaultValue=\"tab1\">// o defaultValue diz para o componente qual tab estará ativa ao carregar\n        <TabList>\n          <TabButton value=\"tab1\">\n            <PowerPlant size={20} />\n            Usina\n          </TabButton>\n          <TabButton value=\"tab2\">\n            <Chart size={20} />\n            Dashboard\n          </TabButton>\n          <TabButton value=\"tab3\">\n            <Map size={20} />\n            Mapa\n          </TabButton>\n        </TabList>\n\n        // IMPORTANTE: o TabContent não tem estilização nenhuma (css) então é necessário criar um elemento\n        // e estilizar ele de acordo com a necessidade, (pode ser usado o componente Box) como abaixo.\n        <TabContent value=\"tab1\">// tab ativa na propriedade defaultValue.\n          <Box\n            // aqui pode usar essa propriedade \"css\", \"style\", ou criar uma classe css no arquivo \"css\" externo\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              gap: '.75rem',\n              margin: '0 auto',\n            }}\n            color=\"backgroundGray\" // pode definir a cor de fundo (cores dos Tokens), (o padrão é branco)\n            borderStyle=\"pointed\" // tipo dos cantos \"pointed\" ou \"rounded\"\n            variant=\"quaternary\" // variante com a cor da borda $neutralExtraLight\n          >\n            // Aqui vai todo o conteúdo\n          </Box>\n        </TabContent>\n        <TabContent value=\"tab2\">\n          <Conteúdo/> // conteúdo dentro da tab\n        </TabContent>\n        <TabContent value=\"tab3\">\n          <Conteúdo/> // conteúdo dentro da tab\n        </TabContent>\n      </TabRoot>\n    </div>\n  );\n};\n```\n### Usando o componente Avatar\n\n```tsx\nimport { Avatar } from \"@solarview-ui/core\";\n\nexport function Component(){\n  return (\n    <div>\n      // o padrão do avatar é receber uma imagem, mas se a imagem passada nao carregar\n      // ou o \"src\" não for passado ele mostra o fallback\n      <Avatar src=\"https://api-v2.solarview.com.br/storage/images/logos/sices.png\" />\n      // o fallbackType existem 2 tipos, \"icon\" e \"name\", o icon seria usado o <User/> ou no\n      // caso do padrão do style guide é usado o <NoImage />\n      // no caso no \"name\" se voce passar por exemplo \"João Silva\" o fallback mostra só as iniciais\n      <Avatar fallbackType=\"name\" name=\"João Silva\" />\n      // temos também o typeData, que será \"image\" ou \"text\", se passar \"text\"\n      // ai o avatar será mostrado como uma label que receberá como filho qualquer texto\n      // esse último modo tem caso de uso para mostrar quantas usinas estão unificadas por exemplo\n      <Avatar typeData=\"text\">\n        10\n      </Avatar>\n    </div>\n  );\n};\n```\n\n## Usando o componente IconButtonGroup (sem limites de botões no grupo)\n\n###### IconButtonGroup\n<img src=\"https://raw.githubusercontent.com/dioggosoares/solarview-ui-oficial/main/packages/docs/public/icon-button-group.png\" align=\"left\" />\n\n```tsx\nimport { IconButtonGroup, IconButton } from \"@solarview-ui/core\";\n\n// IMPORTANTE: esse componente não é mostrado no storybook, o IconButton sim\n\n// esse componente não tem estilização e não deve ter, ele é 100% funcional\n// server para agrupar SOMENTE o botão do tipo IconButton, de forma a deixar\n// o primeiro e o último com bordas arredondadas (padrão proposto no style guide)\n\nexport function Component(){\n  return (\n    <div>\n      <IconButtonGroup\n        // a propriedade \"orientation\" padrão do IconButtonGroup é \"horizontal\"\n        // se passar como vertical o grupo será alinhado verticalmente\n        orientation=\"vertical\"\n      >\n        // o \"size\" padrão é \"sm\", não sendo necessário\n        // ser passado caso esse seja o tamanho necessário\n        // caso contrário voce passar mais 2 opções \"md\" e \"lg\"\n        <IconButton size=\"md\">\n          <Share />\n        </IconButton>\n        <IconButton size=\"md\">\n          <Share />\n        </IconButton>\n        <IconButton size=\"md\">\n          <Share />\n        </IconButton>\n        <IconButton size=\"md\">\n          <Share />\n        </IconButton>\n      </IconButtonGroup>\n    </div>\n  );\n};\n```\n\n## Usando o componente ToggleGroup (somente grupos de 3 botões)\n\n###### ToggleGroup type=\"simple\"\n<img src=\"https://raw.githubusercontent.com/dioggosoares/solarview-ui-oficial/main/packages/docs/public/toggle-group-simple.png\" align=\"left\" />\n\n###### ToggleGroup type=\"multiple\"\n<img src=\"https://raw.githubusercontent.com/dioggosoares/solarview-ui-oficial/main/packages/docs/public/toggle-group-multiple.png\" align=\"left\" />\n\n```tsx\nimport { ToggleGroup, ToggleGroupItem } from \"@solarview-ui/core\";\n\n// IMPORTANTE: esse componente não é mostrado no storybook\n\n// Este componente tem a proposta de ser usado em SOMENTE grupos de 3 buttons\n// Um possível caso de uso seria a contrução de uma barra de ferramentas\n// estilo formatação de documento, como grupo de alinhamento de texto\n// Ex: um grupo de 3 botoes, um TextAlign-Left, TextAlign-Center, TextAlign-Right\n\nexport function Component(){\n  return (\n    <div>\n      // o ToggleGroup recebe uma propriedade obrigatória que o \"type\"\n      // sendo \"simple\" ou \"multiple\", se for passado \"simple\" a funcionalidade toggle\n      // será como um RadioButton ativa um e desativa o anterior\n      // se passar \"multiple\" funciona como Checkbox\n      // ativando um por um e desativando também\n      <ToggleGroup\n        // a propriedade \"orientation\" padrão do ToggleGroup é \"horizontal\"\n        // se passar como vertical o grupo será alinhado verticalmente\n        type=\"simple\"\n        orientation=\"vertical\"\n      >\n        // a propriedade \"value\" também é obrigatória\n        // ele orienta o botão nas funcionalidades do toggle no \"simple\" e \"multiple\"\n        <ToggleGroupItem value=\"left\" size=\"md\">\n          <Share />\n        </ToggleGroupItem>\n        <ToggleGroupItem value=\"center\" size=\"md\">\n          <Share />\n        </ToggleGroupItem>\n        <ToggleGroupItem value=\"right\" size=\"md\">\n          <Share />\n        </ToggleGroupItem>\n      </ToggleGroup>\n    </div>\n  );\n};\n```\n\n### Usando os tokens de cor\n\n```tsx\nimport { User } from \"@solarview-ui/core\";\nimport { colors } from \"@solarview-ui/tokens\";\n\nexport function Component(){\n  return (\n    <div>\n      <User \n        // caso não seja passado um size pra ele o padrão é 16\n        size={20}\n        // passando a cor vermelha para o icone de Usuário\n        color={colors.feedbackDanger}\n      />\n    </div>\n  );\n};\n```\n\n## CSS\n\nTodos os tipos de escrita CSS são suportados, se você precisar adicionar CSS diretamente ao componente, classNames, estilos inline e nomes de classes utilitárias CSS, por exemplo, classes utilitárias vindas do framework Tailwind CSS:\n\n```tsx\nimport { Box } from \"@solarview-ui/core\";\n\nexport function Component(){\n  return (\n    <div>\n      <Box style={{ color: '#fac800' }} />\n      <Box className=\"text-green-500\" variant=\"secondary\" borderStyle=\"pointed\" /> // Tailwind utility class\n      <Box className=\"classic-element-class\" variant=\"tertiary\" />\n    </div>\n  );\n};\n```"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdx","Meta","isMDXComponent","__page","__name","Error","parameters","docsOnly","componentMeta","title","includeStories","mdxStoryNameToKey","docs","page","AddContext","__namedExportsOrder"],"mappings":"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"}